description = 'Spring Integration AWS Support'

buildscript {
	repositories {
        maven { url 'http://vergaarbak.office:8081/nexus/content/groups/public/' }
        maven { url 'http://vergaarbak.office:8081/nexus/content/groups/snapshots-remote/' }
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
    maven { url 'http://vergaarbak.office:8081/nexus/content/groups/public/' }
    maven { url 'http://vergaarbak.office:8081/nexus/content/groups/snapshots-remote/' }
}

def sourceCompatibility = 1.7
def targetCompatibility = 1.7

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

ext {
    apacheHttpclientVersion='4.3'
	awsSdkVersion='1.7.1'
	commonsCodecVersion='1.9'
	commonsIoVersion='2.4'
	javaMailVersion='1.4.4'
	jacksonVersion='1.9.11'
	junitVersion='4.11'
	log4jVersion = '1.2.12'
	mockitoVersion='1.9.0'
	springIntegrationVersion = '4.0.0.RELEASE'
	springVersion = '4.0.1.RELEASE'

	idPrefix = 'aws'

	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'
}

ext.javadocLinks = [
	"http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/"
] as String[]


dependencies {

	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile "com.amazonaws:aws-java-sdk:$awsSdkVersion"
	compile "commons-codec:commons-codec:$commonsCodecVersion"
	compile "commons-io:commons-io:$commonsIoVersion"
	compile "org.codehaus.jackson:jackson-core-asl:$jacksonVersion"
	compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
	compile "org.apache.httpcomponents:httpclient:$apacheHttpclientVersion"
	compile "org.apache.httpcomponents:httpcore:$apacheHttpclientVersion"

	//Amazon SES Support
	compile ("org.springframework.integration:spring-integration-mail:$springIntegrationVersion", optional)
	compile ("javax.mail:mail:$javaMailVersion", optional)

	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "org.hamcrest:hamcrest-all:1.1"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	testCompile "log4j:log4j:$log4jVersion"

	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.4.201312101107", classifier: "runtime"

}

eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

javadoc {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"

	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.description
	options.overview = 'src/api/overview.html'
	options.stylesheetFile = file("src/api/stylesheet.css")
	options.splitIndex = true
	options.links(project.ext.javadocLinks)

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")

	// suppress warnings due to cross-module @see and @link references;
	// note that global 'api' task does display all warnings.
	logging.captureStandardError LogLevel.INFO
	logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();
	def shortName = idPrefix.replaceFirst("${idPrefix}-", '')

	project.sourceSets.main.resources.find {
		it.path.endsWith('META-INF/spring.schemas')
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}

}

task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing the JavaDoc api " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('.') {
			include 'README.md'
		}

		from (javadoc) {
			into 'api'
		}

}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from('.') {
		include 'README.md'
		into "${baseDir}"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	into ("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.11'
}
